Notes

Try to understand how it works or use the test to guide

How it works:
Front-end : collection of users, login and password, list of sites they've shortened.
server : keep track of login and password and their list of sites

Server:

Route:
shortly.js
  get '/' : homepage to enter new site (post) or retrieve sites (get)
  get /links : for a user, get links they've stored
  post /links : for a user, post a new link they want : generate shortened and store.

getting a url and shortening it : it all works!!

1.Create a new user record in 'users' on signup : eh
  Create a signup link on home page and direct users to Signup Page. **to do**
  Use Signup Page - *already created* - **to do**
  Get username and password from Signup Page. **to do**
  SEND to DATABASE :
    Create schema of the tables in the db (config.js) :
    **Table 'users' Created to store usernames and passwords**
    Database: Bookshelf : Object Relational Mapper for Javascript (interface between ADT <-----> raw data types.)
              Generates models / collections on an underlying SQL dB so you can interact with it using normal methods.
              Uses knex SQL query builder : knex instance is a sql db. Use knex api for queries instead of sql commands directly
                (select, where, join).
              Uses sqlite3 dB.
    Create tables of the db for links, users, clicks
      **understand already defined tables click, link in app.js*
    Add username / password entry to users dB

2.
  UPDATE DATABASE relationships:
  urls : userId(FOREIGN KEY) which is users id(PRIMARY KEY)
  set this.hasMany and this.belongsTo
  Use join table to display their sites



3. Understand how the program works: url is inputed, read, and processed to generate code in dB, and link added to the page.
  How are the clicks processed













  --------------------------------------------------------------------------------------------------------------------------
  to do :
  adding signup page : investigate front-end